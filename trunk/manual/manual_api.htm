<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link href="default.css" rel="stylesheet" type="text/css">
<title>PHP Simple HTML DOM Parser</title>
<link href="css/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1><a name="top"></a>PHP Simple HTML DOM Parser Manual</h1>
<div id="content">
  <h2>Index</h2>
  <ul>
    <li><a href="manual.htm">Back to index</a></li>
		<li><a href="#api">API Reference</a></li>
		<li><a href="#camel">Camel naming conventions</a></li>
  </ul>
	<a name="api"></a>
  <h2>API Reference</h2>
	<span class="top"><a href="#top">Top</a></span>
  <div class="code"> <strong>Helper</strong> functions
    <table width="100%"  border="0" cellspacing="2" cellpadding="2">
      <tr>
        <th width="370">Name</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span class="returns">dom</span> <strong>str_get_dom </strong>( <span class="var">string $content</span> )</td>
        <td class="description">Creates a DOM object from a <strong>string</strong>.</td>
      </tr>
      <tr>
        <td><span class="returns">dom</span> <strong>file_get_dom </strong>( <span class="var">string $filename</span> )</td>
        <td class="description">Creates a DOM object from a <strong>file</strong> or a <strong>URL</strong>.</td>
      </tr>
    </table>
    <br>
    <strong>DOM</strong> methods &amp; properties <br>
    <table width="100%"  border="0" cellspacing="2" cellpadding="2">
      <tr>
        <th width="370"> Name</th>
        <th> Description</th>
      </tr>
      <tr>
        <td>
          <div class="returns">void</div>
          $dom-&gt;<strong>load</strong> (<span class="var">string $content [, bool $lowercase]</span> )</td>
        <td class="description"> Load contents from a <strong>string</strong>.<br>
          $<strong>lowercase </strong>(optional): if value is <strong>true</strong>, all tag and attribute names will convert to lowercase for the convenience of query, default value is <strong>true</strong>. </td>
      </tr>
      <tr>
        <td>
          <div class="returns">void</div>
          $dom-&gt;<strong>load_file</strong> (<span class="var"> string $filename</span> )</td>
        <td class="description"> Load contents from a from a <strong>file</strong> or a <strong>URL</strong>.</td>
      </tr>
      <tr>
        <td>
          <div class="returns">string</div>
          $dom-&gt;<strong>save</strong> ( <span class="var">[string $filename]</span> )</td>
        <td class="description">Dumps the internal DOM tree back into a <strong>string</strong>.<br>
          If the <strong>$filename</strong> is set, result string will save to file. </td>
      </tr>
      <tr>
        <td>
          <div class="returns">void</div>
          $dom-&gt;<strong>clear</strong> ()</td>
        <td class="description">Clean up memory.</td>
      </tr>
      <tr>
        <td>
          <div class="returns">mixed</div>
          $dom-&gt;<strong>find</strong> (<span class="var"> string $selector [, int $index] </span>)</td>
        <td class="description">Find elements by the <strong>CSS selector</strong>. <br>
          Returns the Nth element <strong>object</strong> if <strong>index</strong> is set, otherwise return an <strong>array of object</strong>. </td>
      </tr>
    </table>
    <br>
    <strong>Element</strong> methods &amp; properties <br>
    <table width="100%"  border="0" cellspacing="2" cellpadding="2">
      <tr>
        <th width="370">Name</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>
          <div class="returns">mixed</div>
          $e-&gt;<strong>find</strong> (<span class="var"> string $selector [, int $index] </span>)</td>
        <td class="description">Find children by the <strong>CSS selector</strong>. <br>
          Returns the Nth element <strong>object</strong> if <strong>index</strong> is set, otherwise, return an <strong>array</strong> of object. </td>
      </tr>
      <tr>
        <td>
          <div class="returns">string</div>
          $e-&gt;<span class="var"><strong>attribute</strong></span></td>
        <td class="description">Read or write element's <strong>attribure value</strong>. </td>
      </tr>
      <tr>
        <td>
          <div class="returns">void</div>
          $e-&gt;<span class="var"><strong>attribute</strong></span><strong> = null </strong></td>
        <td class="description"><strong>Remove</strong> the attribute of element. </td>
      </tr>
      <tr>
        <td>
          <div class="returns">string</div>
          $e-&gt;<strong>tag</strong></td>
        <td class="description">Read or write the <strong>tag name</strong> of element.</td>
      </tr>
      <tr>
        <td>
          <div class="returns">string</div>
          $e-&gt;<strong>outertext</strong></td>
        <td class="description">Read or write the <strong>outer HTML text </strong> of element.</td>
      </tr>
      <tr>
        <td>
          <div class="returns">string</div>
          $e-&gt;<strong>innertext</strong></td>
        <td class="description">Read or write the <strong>inner HTML text </strong> of element.</td>
      </tr>
      <tr>
        <td>
          <div class="returns">string</div>
          $e-&gt;<strong>plaintext</strong></td>
        <td class="description">Read or write the <strong>plain text </strong> of element.</td>
      </tr>
    </table>
    <strong><br>
    DOM</strong> Traversing<br>
    <table width="100%"  border="0" cellspacing="2" cellpadding="2">
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
      <tr>
        <td width="370">
          <div class="returns">mixed</div>
          $e-&gt;<strong>children</strong> ( <span class="var">[int $index]</span> ) </td>
        <td class="description">Returns the Nth <strong>child object</strong> if <strong>index</strong> is set, otherwise return an <strong>array of children</strong>. </td>
      </tr>
      <tr>
        <td>
          <div class="returns">element</div>
          $e-&gt;<strong>parent</strong> () </td>
        <td class="description">Returns the <strong>parent</strong> of element. </td>
      </tr>
      <tr>
        <td>
          <div class="returns">element</div>
          $e-&gt;<strong>first_child</strong> () </td>
        <td class="description">Returns the <strong>first child</strong> of element, or <strong>null</strong> if not found. </td>
      </tr>
      <tr>
        <td>
          <div class="returns">element</div>
          $e-&gt;<strong>last_child </strong>() </td>
        <td class="description">Returns the <strong>last child</strong> of element, or <strong>null</strong> if not found. </td>
      </tr>
      <tr>
        <td>
          <div class="returns">element</div>
          $e-&gt;<strong>next_sibling </strong>() </td>
        <td class="description">Returns the <strong>next sibling</strong> of element, or<strong> null</strong> if not found. </td>
      </tr>
      <tr>
        <td>
          <div class="returns">element</div>
          $e-&gt;<strong>prev_sibling </strong>() </td>
        <td class="description">Returns the <strong>previous sibling</strong> of element, or <strong>null</strong> if not found. </td>
      </tr>
    </table>
    <br>
    <strong>DOM</strong> parsing methods (<span class="var">Use only if you want to customize the parsing behavior</span>) <br>
    <table width="100%"  border="0" cellspacing="2" cellpadding="2">
      <tr>
        <th> Name</th>
        <th> Description</th>
      </tr>
      <tr>
        <td width="565">
          <div class="returns">void</div>
          $dom-&gt;<strong>prepare</strong> ( <span class="var">string $content</span> )</td>
        <td width="414" class="description">prepare HTML data and init everything.</td>
      </tr>
      <tr>
        <td>
          <div class="returns">void</div>
          $dom-&gt;<strong>remove_noise</strong> ( <span class="var">string $pattern
          [, $remove_tag [, $remove_contents]] </span>)</td>
        <td class="description">Remove noise from html content before parsing.<strong><br>
          $pattern</strong>: regular expression.<br>
          <strong>$remove_tag</strong> (optional): drop the noise tag, default value is <strong>true</strong>. <br>
          <strong>$remove_content </strong>(optional): drop the noise content, default value is <strong>true</strong>. </td>
      </tr>
      <tr>
        <td height="34">
          <div class="returns">node</div>
          $dom-&gt;<strong>parse</strong> ()</td>
        <td class="description">Returns the parsed <strong>node</strong>, or <strong>null</strong> while end of parsing. </td>
      </tr>
    </table>
  </div>
	<a name="camel"></a>
	<h2>Camel naming convertions</h2>
	<span class="top"><a href="#top">Top</a></span>
    <div class="code">You can also call methods with W3C STANDARD camel naming convertions.<br>
      <br>
      <table width="100%"  border="0" cellspacing="1" cellpadding="2">
        <tr>
          <th width="50%">Method</th>
          <th>Mapping</th>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">string</div>
            $e-&gt;getAttribute ( <span class="var">$name</span> ) </td>
          <td>
            <div class="returns">string</div>
            $e-&gt;<span class="var">attribute</span></td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">void</div>
            $e-&gt;setAttribute ( <span class="var">$name, $value</span> ) </td>
          <td>
            <div class="returns">void</div>
            $value = $e-&gt;<span class="var">attribute</span></td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">bool</div>
            $e-&gt;hasAttribute ( <span class="var">$name</span> ) </td>
          <td>
            <div class="returns">bool</div>
            isset($e-&gt;<span class="var">attribute</span>)</td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">void</div>
            $e-&gt;removeAttribute ( <span class="var">$name</span> ) </td>
          <td>
            <div class="returns">void</div>
            $e-&gt;<span class="var">attribute</span> = null</td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">element</div>
            $e-&gt;getElementById ( <span class="var">$id</span> ) </td>
          <td>
            <div class="returns">mixed</div>
            $e-&gt;find (<span class="var"> &quot;#$id&quot;, 0 </span>)</td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">mixed</div>
            $e-&gt;getElementsById ( <span class="var">$id [,$index] </span> ) </td>
          <td>
            <div class="returns">mixed</div>
            $e-&gt;find (<span class="var"> &quot;#$id&quot; [, int $index] </span>)</td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">element</div>
            $e-&gt;getElementByTagName (<span class="var">$name</span> ) </td>
          <td>
            <div class="returns">mixed</div>
            $e-&gt;find (<span class="var"> $name, 0 </span>)</td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">mixed</div>
            $e-&gt;getElementsByTagName ( <span class="var">$name [, $index]</span> ) </td>
          <td>
            <div class="returns">mixed</div>
            $e-&gt;find (<span class="var"> $name [, int $index] </span>)</td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">element</div>
            $e-&gt;parentNode () </td>
          <td>
            <div class="returns">element</div>
            $e-&gt;parent () </td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">mixed</div>
            $e-&gt;childNodes ( <span class="var">[$index]</span> ) </td>
          <td>
            <div class="returns">mixed</div>
            $e-&gt;children ( <span class="var">[int $index]</span> ) </td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">element</div>
            $e-&gt;firstChild () </td>
          <td>
            <div class="returns">element</div>
            $e-&gt;first_child () </td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">element</div>
            $e-&gt;lastChild () </td>
          <td>
            <div class="returns">element</div>
            $e-&gt;last_child () </td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">element</div>
            $e-&gt;nextSibling () </td>
          <td>
            <div class="returns">element</div>
            $e-&gt;next_sibling () </td>
        </tr>
        <tr bgcolor="#EEEEEE">
          <td>
            <div class="returns">element</div>
            $e-&gt;previousSibling () </td>
          <td>
            <div class="returns">element</div>
            $e-&gt;prev_sibling () </td>
        </tr>
      </table>
    </div>
  <div><br>
    Author: S.C. Chen (me578022@gmail.com)<br>
    Contributions by: Yousuke Kumakura (Attribute Filters) <br>
  </div>
</div>
</body>
</html>
